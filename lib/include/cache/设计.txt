
缓存设计（key - value）

数据类型:
	列表（list）:优点：快速插入和快速删除，内存利用更为合理；缺点：对于数据经常性的查找，没有足够好的效率。

	映射（map）:优点：快速查找；缺点：插入和删除效率相对较低，

	集合（set）:比映射使用更少的内存。

	散列（hash）:优点：在特殊情况下能获得最快的查找效率；缺点：查找效率不稳定。

	字符串（string）:以映射为基础，内部再构建一个字符串类作为存储。
	...

	更多的数据类型可以通过上述基本类型扩展。

需求：
	*临时数据：
	游戏中存在大多数临时数据数据，这些数据一般具有单向流动性的特征（起码从一定的时间内具有单向流动性的特征）。
	即数据只从内存流向数据库，或者从数据库流向内存。

	由于数据不需要更新，因此只需要将数据保存在数据队列即可。
	初步设计是：封装循环队列，保存数据。

	*长期有效数据：
	例如：玩家个人相关数据和登录记录等等，这些数据一般跟玩家频繁上下线有关。
	因为玩家上线时，一般来程序需要将玩家数据从数据库加载到内存，如果说不使用缓存，这部分将会消耗相当多的时间。
	注：
		直接操作数据库缺点：
		1、从数据库查找信息比从内存查找来的慢。
		2、从数据库加载还涉及网络消耗。
		3、容易引发堵车效应。（本人弄出的名词，意思就是前面的车堵住了，不管后面的车速度多快，也是徒劳无功）

	* hash或者map保存表指针（之前想法）
	* 用hash或者map保存玩家相关数据，这些数据是序列化的，key就是玩家的唯一id。
	-->这样做因为传送的数据就是序列化的,不用再反序列化。直接放到内存中保存。（2015.02.09）
