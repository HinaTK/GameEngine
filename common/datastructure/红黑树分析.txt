性质：
1）每个结点要么是红的，要么是黑的。
2）根结点是黑的。
3）每个叶结点，即空结点（NIL）是黑的。
4）如果一个结点是红的，那么它的俩个儿子都是黑的。
5）对每个结点，从该结点到其子孙结点的所有路径上包含相同数目的黑结点。

前言：
	首先红黑树是二叉查找树，因此红黑树的节点存储及节点查找是基于二叉查找树的。
	最好情况下，二叉查找树会变成变成完全二叉树。其实时间复杂度为O(log n)。
	最坏情况下，当先后插入的关键字有序时，构成的二叉查找树蜕变为单支树。其实时间复杂度为O(n)。

	同时红黑树又是一种加了自平衡的二叉查找树，当红黑树的节点发生变化时，通过各种转换（旋转），使树重新接近或者等于完全二叉树。
	因此说，红黑树的查找复杂度为O(log n)。
	总之，无论红黑树插入、删除都不会改变其二叉查找树的性质；因此如果理解了二叉查找树性质,那么红黑树就很容易理解了。

1、插入
	首先按二叉查找树一样插入节点，之后调整节点以适合红黑树的5条性质。
	* 插入结点为红色节点,如果父节点为黑色，满足5条性质。
	（下面是判断父结点都是红色）
	* 父结点是红色，插入结点为红色，不满足性质4，
	左旋：就是将节点A的右子节点B替换成自己的位置，节点A成为了节点B的左子节点，原来节点B的左子节点成为了节点A的右子节点。
		
		 root
		╱ ╲
	   Z    ...
		      ╲
				A						
			  ╱ ╲                  
			 E	   B		
				 ╱ ╲
				F	  C
					   ╲
						 D
	=>
		 root
		╱ ╲
	   Z    ...
		      ╲
				B						
			  ╱ ╲                  
			 A	   C		
		   ╱ ╲    ╲              
		  E	 	F     D

	右旋：同左旋差不多；只是旋转的方向不同
	图略。

				
